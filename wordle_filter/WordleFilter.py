######################################
#
# TODO: documentation
#
# author - Ryan Muetzel (@pretzelryan)
#

# imports
import subprocess
import csv

# local package imports
from .WordleGuess import WordleGuess


# Global variables
WORD_LIST_FILENAME = "word_list.csv"


def store_word_list():
    """
    Gets and stores the list of possible words to a local csv file.

    """
    # set up the subprocess to get the word list from github repo
    command = "curl -s https://raw.githubusercontent.com/tabatkins/wordle-list/main/words"
    result = subprocess.run(command, shell=True, text=True, capture_output=True)

    # if successfully got the response, parse into a list
    if result.returncode == 0:
        words = result.stdout.splitlines()
    # otherwise throw error
    else:
        raise subprocess.SubprocessError(result.returncode, command, result.stderr)

    # store returned word list to a local .csv file
    with open(WORD_LIST_FILENAME, "w", newline="") as file:
        writer = csv.writer(file)
        writer.writerow(words[0:])


def get_word_list():
    """
    Gets the list of possible word list from the local csv file.  If a local csv file is not present, a new one will be
    generated by calling store_word_list().

    :return: list of all possible words
    """
    # open the file and get the words
    with open(WORD_LIST_FILENAME, "r") as file:
        reader = csv.reader(file)
        words = [row for row in reader]

    # TODO: try/catch for when the file does not exist (FileNotFoundError)

    return words


class WordleFilter:
    """
    Handles narrowing down the words for a Wordle game based on provided guesses.

    """
    def __init__(self):
        # TODO: docstring
        pass

