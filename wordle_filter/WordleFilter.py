######################################
#
# WordleFilter - Class responsible for filtering word list down based on provided guesses.
#
# author - Ryan Muetzel (@pretzelryan)
#

# imports
import subprocess
import csv

# local package imports
from .WordleGuess import WordleGuess, LetterColor

# Global variables
WORD_LIST_FILENAME = "word_list.csv"


def store_word_list():
    """
    Gets and stores the list of possible words to a local csv file.

    """
    # set up the subprocess to get the word list from github repo
    command = "curl -s https://raw.githubusercontent.com/tabatkins/wordle-list/main/words"
    result = subprocess.run(command, shell=True, text=True, capture_output=True)

    # if successfully got the response, parse into a list
    if result.returncode == 0:
        words = result.stdout.splitlines()
    # otherwise throw error
    else:
        raise subprocess.SubprocessError(result.returncode, command, result.stderr)

    # store returned word list to a local .csv file
    with open(WORD_LIST_FILENAME, "w", newline="") as file:
        writer = csv.writer(file)
        writer.writerow(words[0:])


def get_word_list():
    """
    Gets the list of possible word list from the local csv file.  If a local csv file is not present, a new one will be
    generated by calling store_word_list().

    :return: list of all possible words
    """
    # open the local file to get the words.
    try:
        return _open_word_list()

    # if no file, then send the API request to generate the file, then return it.
    except FileNotFoundError as e:
        store_word_list()
        return _open_word_list()


def _open_word_list():
    """
    Opens the locally stored csv file with all possible wordle words.

    Raises:
        FileNotFoundError if csv file does not exist or cannot be found.

    :return: list of all possible words
    """
    with open(WORD_LIST_FILENAME, "r") as file:
        reader = csv.reader(file)
        words = [row for row in reader][0]

    return words


class WordleFilter:
    """
    Handles narrowing down the words for a Wordle game based on provided guesses.

    """
    def __init__(self):
        """
        Constructor.

        """
        self.remaining_word_list = get_word_list()
        self.guess_list = []

    def add_guess(self, guess: WordleGuess):
        """
        Adds the next guess to the guessed word list, then filters the remaining word list based on information from
        the guess.

        :param guess: WordleGuess used in game.
        :return: None
        """
        self.guess_list.append(guess)
        self._filter_word_list(guess)

    def get_remaining_words(self):
        """
        Returns the remaining words for the given wordle game.

        :return: list of remaining words.
        """
        return self.remaining_word_list

    def _filter_word_list(self, guess: WordleGuess):
        """
        Filters out words from the remaining word list based on information from the guess.

        :param guess: WordleGuess used in game.
        :return: None
        """
        green_index_list = guess.location_dict[LetterColor.GREEN]
        yellow_index_list = guess.location_dict[LetterColor.YELLOW]
        grey_index_list = guess.location_dict[LetterColor.YELLOW]

        # Use a copy of the word list during iteration to avoid runtime errors.
        for word in self.remaining_word_list.copy():
            # example dict = {green: [1, 2], yellow: [4], grey: [3, 5]}

            # Remove words that do not contain green letters in position.
            for i in green_index_list:
                if word[i] != guess.word[i]:
                    self.remaining_word_list.remove(word)
                    break

            # If the word was not yet removed:
            # Remove words that do not contain yellow letters in position other than the location given.
            else:
                for i in yellow_index_list:
                    # Remove the word if it does not contain the yellow letter.
                    if i not in word:
                        self.remaining_word_list.remove(word)
                        break
                    # Remove the word if it contains the yellow letter in the yellow index.
                    if word[i] == guess.word[i]:
                        self.remaining_word_list.remove(word)
                        break

                # If the word was not yet removed:
                # Remove words that contain grey letters.
                else:
                    for i in grey_index_list:
                        if i in word:
                            self.remaining_word_list.remove(word)
                            break
